import logging
from datetime import datetime, timedelta
from app.config import ADMIN_ID
from app.keyboards.user_kb import get_rating_kb

class NotificationService:
    def __init__(self, bot, db, scheduler):
        self.bot = bot
        self.db = db
        self.scheduler = scheduler

    async def send_admin_notification(self, appointment):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–π/–æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        try:
            master = self.db.get_master_by_id(appointment.get('master_id'))
            if not master and 'master_id' in appointment:
                logging.error(f"–ú–∞—Å—Ç–µ—Ä —Å ID {appointment['master_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            return

        if 'status' in appointment and appointment['status'] == 'canceled':
            text = (
                "üö´ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!\n"
                f"üîë ID: {appointment['unique_id']}\n"
                f"üíÖ –£—Å–ª—É–≥–∞: {appointment['service']}\n"
                f"üìÖ –î–∞—Ç–∞: {appointment['date']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {appointment['time']}\n"
                f"üë§ User ID: {appointment['user_id']}"
            )
        else:
            if master:
                username = f" (@{master[5]})" if master[5] else ""
                master_info = f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master[1]} {master[2]}{username}\n"
            else:
                master_info = ""
                
            text = (
                "üìå –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n"
                f"üîë ID: {appointment['unique_id']}\n"
                f"üíÖ –£—Å–ª—É–≥–∞: {appointment['service']}\n"
                f"{master_info}"
                f"üìÖ –î–∞—Ç–∞: {appointment['date']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {appointment['time']}\n"
                f"üë§ User ID: {appointment['user_id']}"
            )
            
        await self.bot.send_message(ADMIN_ID, text)

    async def send_master_notification(self, master_id, appointment):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
        master = self.db.get_master_by_id(master_id)
        if not master or not master[4]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Å—Ç–µ—Ä –∏ –µ–≥–æ Telegram ID
            return

        try:
            await self.bot.send_message(
                master[4],
                f"üìå –£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n"
                f"üíÖ –£—Å–ª—É–≥–∞: {appointment['service']}\n"
                f"üìÖ –î–∞—Ç–∞: {appointment['date']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {appointment['time']}"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É: {e}")

    async def send_reminder(self, user_id, appointment):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏"""
        text = (
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!\n"
            f"üíÖ –£—Å–ª—É–≥–∞: {appointment['service']}\n"
            f"üìÖ –î–∞—Ç–∞: {appointment['date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {appointment['time']}"
        )
        await self.bot.send_message(user_id, text)

    async def request_review(self, user_id, unique_id):
        """–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è"""
        keyboard = get_rating_kb(unique_id)
        await self.bot.send_message(
            user_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:",
            reply_markup=keyboard
        )

    async def send_cancellation_notification(self, user_id, appointment):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        text = (
            "üö´ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üîë ID –∑–∞–ø–∏—Å–∏: {appointment['unique_id']}\n"
            f"üíÖ –£—Å–ª—É–≥–∞: {appointment['service']}\n"
            f"üìÖ –î–∞—Ç–∞: {appointment['date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {appointment['time']}"
        )
        await self.bot.send_message(user_id, text)
        
    def schedule_notifications(self, user_id, appointment_data):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∑—ã–≤–∞"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –æ–±—ä–µ–∫—Ç datetime
            appointment_datetime = datetime.strptime(
                f"{appointment_data['date']} {appointment_data['time']}", 
                "%Y-%m-%d %H:%M"
            )

            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –∑–∞–ø–∏—Å–∏
            self.scheduler.add_job(
                self.send_reminder,
                'date',
                run_date=appointment_datetime - timedelta(days=1),
                args=[user_id, appointment_data]
            )

            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏
            self.scheduler.add_job(
                self.send_reminder,
                'date',
                run_date=appointment_datetime - timedelta(hours=2),
                args=[user_id, appointment_data]
            )

            # –ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
            self.scheduler.add_job(
                self.request_review,
                'date',
                run_date=appointment_datetime + timedelta(hours=2),
                args=[user_id, appointment_data['unique_id']]
            )
            
            logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_data['unique_id']}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
