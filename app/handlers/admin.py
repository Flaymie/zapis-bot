import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from app.config import ADMIN_ID
from app.models.states import AdminStates
from app.keyboards.admin_kb import (
    get_admin_main_kb, 
    get_admin_masters_kb, 
    get_admin_reviews_kb,
    get_admin_review_detail_kb,
    get_admin_back_kb
)
from app.services.appointment import AppointmentService
from app.services.review import ReviewService
from app.utils.helpers import get_user_info, format_master_info

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã (–æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞)
appointment_service = None
review_service = None
db = None
bot = None

def init_services(appointment_svc, review_svc, database, bot_instance):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    global appointment_service, review_service, db, bot
    appointment_service = appointment_svc
    review_service = review_svc
    db = database
    bot = bot_instance

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(message: types.Message):
    return message.from_user.id == ADMIN_ID

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(Command("admin"))
async def admin_handler(message: types.Message):
    if not is_admin(message):
        return

    try:
        await message.answer(
            "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_main_kb()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ admin: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

# –ü–æ–∫–∞–∑ –∑–∞–ø–∏—Å–µ–π –ø–æ —É—Å–ª—É–≥–µ
@router.callback_query(F.data.startswith("admin_service_"))
async def admin_service_handler(callback: types.CallbackQuery):
    if not is_admin(callback.message):
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
        service = callback.data.split("_")[2]
        appointments = db.get_appointments_by_service(service)

        if not appointments:
            await callback.answer("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–ø–∏—Å—è–º–∏
        text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:\n\n"
        for app in appointments:
            master = db.get_master_by_id(app[5]) if len(app) > 5 else None
            master_info = f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {format_master_info(master)}\n" if master else ""
            
            text += (
                f"üîë ID: {app[0]}\n"
                f"üë§ User ID: {app[1]}\n"
                f"üíÖ –£—Å–ª—É–≥–∞: {app[2]}\n"
                f"{master_info}"
                f"üìÖ –î–∞—Ç–∞: {app[3]}\n"
                f"‚è∞ –í—Ä–µ–º—è: {app[4]}\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            )

        # –í—ã–≤–æ–¥–∏–º —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_back_kb()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ —É—Å–ª—É–≥–µ: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏
@router.callback_query(F.data == "admin_masters")
async def admin_masters_handler(callback: types.CallbackQuery):
    if not is_admin(callback.message):
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        masters = db.get_all_masters()

        if not masters:
            text = "üë®‚Äçüîß –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø—É—Å—Ç."
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏
            text = "üë®‚Äçüîß –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤:\n\n"
            for master in masters:
                username = f" (@{master[5]})" if master[5] else ""
                text += (
                    f"üîë ID: {master[0]}\n"
                    f"üë§ –ò–º—è: {master[1]} {master[2]}{username}\n"
                    f"üíÖ –£—Å–ª—É–≥–∞: {master[3]}\n"
                    f"üÜî TG ID: {master[4]}\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                )

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await callback.message.edit_text(
            text, 
            reply_markup=get_admin_masters_kb()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞–º–∏: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ - –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
@router.callback_query(F.data == "admin_add_master")
async def admin_add_master_handler(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.message):
        return

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –º–∞—Å—Ç–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤):")
    await state.set_state(AdminStates.adding_master_name)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å —É—Å–ª—É–≥–∏
@router.message(AdminStates.adding_master_name)
async def admin_add_master_name_handler(message: types.Message, state: FSMContext):
    if not is_admin(message):
        return

    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
        full_name = message.text.strip().split()
        if len(full_name) != 2:
            await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
        first_name, last_name = full_name
        await state.update_data(first_name=first_name, last_name=last_name)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Å–ª—É–≥—É
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Ç–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–Ω–∏–∫—é—Ä):")
        await state.set_state(AdminStates.adding_master_service)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏ –∑–∞–ø—Ä–æ—Å Telegram ID
@router.message(AdminStates.adding_master_service)
async def admin_add_master_service_handler(message: types.Message, state: FSMContext):
    if not is_admin(message):
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª—É–≥—É
        service = message.text.strip()
        await state.update_data(service=service)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Telegram ID
        await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –º–∞—Å—Ç–µ—Ä–∞ (—á–∏—Å–ª–æ–≤–æ–π):")
        await state.set_state(AdminStates.adding_master_telegram)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —É—Å–ª—É–≥–∏")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ Telegram ID –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
@router.message(AdminStates.adding_master_telegram)
async def admin_add_master_telegram_handler(message: types.Message, state: FSMContext):
    if not is_admin(message):
        return

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —á–∏—Å–ª–æ
        telegram_id = int(message.text.strip())
        data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API Telegram
        user_info = await get_user_info(bot, telegram_id)
        username = user_info["username"] if user_info else None

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ –≤ –±–∞–∑—É
        master_data = {
            "first_name": data["first_name"],
            "last_name": data["last_name"],
            "service": data["service"],
            "telegram_id": telegram_id,
            "username": username
        }
        
        success = db.add_master(master_data)
        
        if success:
            await message.answer("‚úÖ –ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            await message.answer("‚ö† –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except ValueError:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π Telegram ID")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Telegram ID –º–∞—Å—Ç–µ—Ä–∞: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞")

# –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ - –∑–∞–ø—Ä–æ—Å ID
@router.callback_query(F.data == "admin_delete_master")
async def admin_delete_master_handler(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.message):
        return

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AdminStates.deleting_master)

# –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ ID –∏ —É–¥–∞–ª–µ–Ω–∏–µ
@router.message(AdminStates.deleting_master)
async def admin_delete_master_id_handler(message: types.Message, state: FSMContext):
    if not is_admin(message):
        return

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —á–∏—Å–ª–æ
        master_id = int(message.text.strip())
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ ID
        master = db.get_master_by_id(master_id)
        if not master:
            await message.answer("‚ö†Ô∏è –ú–∞—Å—Ç–µ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –£–¥–∞–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
        success = db.delete_master(master_id)
        
        if success:
            await message.answer(f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master[1]} {master[2]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–∞—Å—Ç–µ—Ä–∞ (—á–∏—Å–ª–æ)")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤
@router.callback_query(F.data == "admin_reviews")
async def admin_reviews_handler(callback: types.CallbackQuery):
    if not is_admin(callback.message):
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
        reviews, error = review_service.get_all_reviews()
        
        if error:
            await callback.answer(f"‚ö†Ô∏è {error}")
            return
            
        if not reviews:
            await callback.answer("üì≠ –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")
            return

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
        await callback.message.edit_text(
            "üìù –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤:",
            reply_markup=get_admin_reviews_kb(reviews)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –æ—Ç–∑—ã–≤–∞
@router.callback_query(F.data.startswith("admin_review_"))
async def admin_review_detail_handler(callback: types.CallbackQuery):
    if not is_admin(callback.message):
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç–∑—ã–≤–∞
        review_id = callback.data.split("_")[2]
        review = db.get_review_by_id(review_id)

        if not review:
            await callback.answer("‚ö†Ô∏è –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—Ç–∑—ã–≤–∞
        text = (
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {review[1]}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {review[2]}\n"
            f"üíÖ –£—Å–ª—É–≥–∞: {review[3]}\n"
            f"üë§ User ID: {review[4]}\n"
            f"üìÖ –î–∞—Ç–∞: {review[5]}"
        )

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_review_detail_kb(review_id)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–∑—ã–≤–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–∞")

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–∑—ã–≤–∞
@router.callback_query(F.data.startswith("admin_block_"))
async def admin_block_review_handler(callback: types.CallbackQuery):
    if not is_admin(callback.message):
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç–∑—ã–≤–∞
        review_id = callback.data.split("_")[2]
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤
        success, error = review_service.block_review(review_id)
        
        if success:
            await callback.answer("‚úÖ –û—Ç–∑—ã–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∑—ã–≤–æ–≤
            await admin_reviews_handler(callback)
        else:
            await callback.answer(f"‚ö†Ô∏è {error}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–∑—ã–≤–∞")

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data == "admin_back")
async def admin_back_handler(callback: types.CallbackQuery):
    if not is_admin(callback.message):
        return

    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.edit_text(
            "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_main_kb()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
