import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from app.models.states import BookingStates
from app.keyboards.user_kb import (
    get_services_kb, 
    get_masters_kb, 
    get_dates_kb, 
    get_times_kb, 
    get_confirmation_kb
)
from app.services.appointment import AppointmentService
from app.services.review import ReviewService
from app.utils.helpers import format_master_info

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã (–æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞)
appointment_service = None
review_service = None
db = None

def init_services(appointment_svc, review_svc, database):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    global appointment_service, review_service, db
    appointment_service = appointment_svc
    review_service = review_svc
    db = database

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç - –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
@router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    try:
        await message.answer(
            "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=get_services_kb()
        )
        await state.set_state(BookingStates.choosing_service)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
@router.callback_query(F.data.startswith("service_"), BookingStates.choosing_service)
async def service_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–∑ callback_data
        service = callback.data.split("_")[1]
        await state.update_data(service=service)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏
        masters = db.get_masters_by_service(service)
        if not masters:
            await callback.message.answer("‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏")
            return

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
        await callback.message.edit_text(
            "üë®‚Äçüîß –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=get_masters_kb(masters)
        )
        await state.set_state(BookingStates.choosing_master)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏: {e}")
        await callback.message.answer("‚ö† –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏")

# –í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞
@router.callback_query(F.data.startswith("master_"), BookingStates.choosing_master)
async def master_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ callback_data
        master_id = int(callback.data.split("_")[1])
        master = db.get_master_by_id(master_id)
        
        if not master:
            await callback.answer("‚ö†Ô∏è –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
        await state.update_data(master_id=master_id)
        master_name = format_master_info(master)
        await state.update_data(master_name=master_name)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
        await callback.message.edit_text(
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master_name}\n"
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:",
            reply_markup=get_dates_kb()
        )
        await state.set_state(BookingStates.choosing_date)
    except ValueError:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –º–∞—Å—Ç–µ—Ä–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞")

# –í—ã–±–æ—Ä –¥–∞—Ç—ã
@router.callback_query(F.data.startswith("date_"), BookingStates.choosing_date)
async def date_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        selected_date = callback.data.split("_")[1]
        data = await state.get_data()

        if 'service' not in data:
            await callback.answer("‚ö† –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É!")
            return

        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        booked_times = db.get_booked_times(selected_date, data['service'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        await state.update_data(date=selected_date)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
        await callback.message.edit_text(
            f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {selected_date}:",
            reply_markup=get_times_kb(selected_date, booked_times)
        )
        await state.set_state(BookingStates.choosing_time)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã: {e}")
        await callback.message.answer("‚ö† –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")

# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
@router.callback_query(F.data.startswith("time_"), BookingStates.choosing_time)
async def time_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –≤—Ä–µ–º—è
        if callback.data == "time_blocked":
            await callback.answer("‚ö†Ô∏è –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!")
            return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        selected_time = callback.data.split("_")[1]
        await state.update_data(time=selected_time)
        data = await state.get_data()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        text = (
            "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n"
            f"üíÖ –£—Å–ª—É–≥–∞: {data['service']}\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {data['master_name']}\n"
            f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {data['time']}"
        )

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.edit_text(
            text, 
            reply_markup=get_confirmation_kb()
        )
        await state.set_state(BookingStates.confirmation)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
@router.callback_query(F.data == "confirm_yes", BookingStates.confirmation)
async def confirm_yes_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        appointment_data, error = appointment_service.create_appointment(
            callback.from_user.id,
            data['service'],
            data['date'],
            data['time'],
            data['master_id']
        )
        
        if error:
            await callback.message.answer(f"‚ö†Ô∏è {error}")
            return
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç.–¥.)
        success = await appointment_service.process_appointment(
            callback.from_user.id,
            appointment_data
        )
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
                f"–í–∞—à ID: {appointment_data['unique_id']}"
            )
        else:
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
                f"–í–∞—à ID: {appointment_data['unique_id']}"
            )
            
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")

# –û—Ç–º–µ–Ω–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
@router.callback_query(F.data == "confirm_no", BookingStates.confirmation)
async def confirm_no_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
@router.message(Command("cancel"))
async def cancel_command_handler(message: types.Message, state: FSMContext):
    await message.answer("‚ùì –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã:")
    await state.set_state(BookingStates.cancel_appointment)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
@router.message(BookingStates.cancel_appointment)
async def cancel_appointment_handler(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏
        unique_id = message.text.strip().upper()
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        success, error = await appointment_service.cancel_appointment(
            unique_id, 
            message.from_user.id
        )
        
        if success:
            await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å {unique_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            await message.answer(f"‚ö†Ô∏è {error}")
            
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∑—ã–≤–∞
@router.callback_query(F.data.startswith("review_"))
async def review_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        parts = callback.data.split("_")
        if len(parts) != 3:
            await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        unique_id, rating = parts[1], parts[2]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        appointment = db.get_appointment_by_id(unique_id)
        if not appointment:
            await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞
        await state.update_data(
            review_unique_id=unique_id,
            review_rating=rating
        )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        await callback.message.answer(
            "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )
        await state.set_state(BookingStates.review_comment)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—Ç–∑—ã–≤–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∑—ã–≤—É
@router.message(BookingStates.review_comment)
async def review_comment_handler(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        comment = message.text if message.text != "-" else ""

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
        success, error = review_service.add_review(
            data['review_unique_id'],
            message.from_user.id,
            data['review_rating'],
            comment
        )
        
        if success:
            await message.answer("üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
        else:
            await message.answer(f"‚ö†Ô∏è {error}")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(Command("reviews"))
async def user_reviews_handler(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reviews, error = review_service.get_user_reviews(message.from_user.id)
        
        if error:
            await message.answer(f"‚ö†Ô∏è {error}")
            return
            
        if not reviews:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏
        text = "‚≠ê –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã:\n\n"
        for review in reviews:
            text += (
                f"üíÖ –£—Å–ª—É–≥–∞: {review[2]}\n"
                f"üìÖ –î–∞—Ç–∞: {review[3]}\n"
                f"–†–µ–π—Ç–∏–Ω–≥: {review[0]}‚≠ê\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {review[1]}\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            )

        await message.answer(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤")
