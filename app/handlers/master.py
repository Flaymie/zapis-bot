import logging
from aiogram import Router, types
from aiogram.filters import Command

from app.utils.helpers import format_master_info

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ –º–∞—Å—Ç–µ—Ä–æ–≤
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
db = None

def init_services(database):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    global db
    db = database

# –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Å—Ç–µ—Ä–æ–º —Å–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π
@router.message(Command("my_appointments"))
async def my_appointments_handler(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä–æ–º
        master = db.get_master_by_telegram_id(message.from_user.id)
        if not master:
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏
        appointments = db.get_upcoming_appointments_for_master(master[0])
        
        if not appointments:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        text = f"üë®‚Äçüîß {format_master_info(master)}\nüìã –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏:\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
        appointments_by_date = {}
        for app in appointments:
            date = app[1]
            if date not in appointments_by_date:
                appointments_by_date[date] = []
            appointments_by_date[date].append(app)
        
        # –í—ã–≤–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º
        for date, apps in sorted(appointments_by_date.items()):
            text += f"üìÖ {date}:\n"
            for app in sorted(apps, key=lambda x: x[2]):  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                text += (
                    f"‚è∞ {app[2]} - {app[3]}\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: ID {app[4]}\n"
                    f"üîë ID –∑–∞–ø–∏—Å–∏: {app[0]}\n"
                )
            text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

        await message.answer(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –º–∞—Å—Ç–µ—Ä–∞: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å–∏.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
@router.message(Command("today"))
async def today_appointments_handler(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä–æ–º
        master = db.get_master_by_telegram_id(message.from_user.id)
        if not master:
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        appointments = db.get_today_appointments_for_master(master[0])
        
        if not appointments:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        text = f"üë®‚Äçüîß {format_master_info(master)}\nüìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        
        for app in sorted(appointments, key=lambda x: x[3]):  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            text += (
                f"‚è∞ {app[3]} - {app[2]}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: ID {app[1]}\n"
                f"üîë ID –∑–∞–ø–∏—Å–∏: {app[0]}\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            )

        await message.answer(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
